{"name":"heartbleed-provisioner","description":"Installs/Configures heartbleed vulnerable server for the 2014 MITRE CTF.","long_description":"heartbleed-provisioner\n======================\n\nName: Achy Breaky Heart\n\nDescription: Users are provided with a heartbleed vulnerable server which they must exploit in order to obtain the private key of a user named jason which is used to decrypt a message found on a page of the site.\n\nSolution: First, the user will need to exploit the heartbleed vulnerability on the box, they can do so using [heartleech.](https://github.com/robertdavidgraham/heartleech) and the command `./heartleech host:port  --autopwn --threads 20`\n\nNext, they will need to copy the key to a file, (I called the file heartkey) and then run the command `chown 600 heartkey` in order to set the permissions to an acceptable value and run `ssh jason@host -i`pwd`/heartkey` to gain access to the box.\n\nNote: If you are using vagrant, you will need to append -p2222 to the ssh command, since vagrant uses a non-standard port.\n\nOnce in, the user will need to find the right DOC file out of the 20,000 files (Tom Riddle 159962.doc). Running `cat Tom Riddle 159962.doc` will give the contents of the document. A link to the web page with the encrypted flag is in this document.\n\nThe user must then go to that link, take the private key from the server by running `cat .ssh/id_rsa`, and decrypt the message. A Python scrypt, like the one below, can be written for decryption:\n\t\n\tdef _decrypt_rsa(decrypt_key_file, cipher_text):\n    \t'''\n    \tDecrypt RSA encrypted package with private key\n    \t:param decrypt_key_file: Private key\n    \t:param cipher_text: Base64 encoded string to decrypt\n    \t:return: String decrypted\n    \t'''\n    \tfrom Crypto.PublicKey import RSA\n    \tfrom base64 import b64decode\n\t\n    \tkey = open(decrypt_key_file, \"r\").read()\n    \trsakey = RSA.importKey(key)\n    \t#optionally could use OAEP\n    \t#from Crypto.Cipher import PKCS1_OAEP\n    \t#rsakey = PKCS1_OAEP.new(rsakey)\n    \traw_cipher_data = b64decode(cipher_text)\n    \tdecrypted = rsakey.decrypt(raw_cipher_data)\n    \treturn decrypted\n\t\n\tdecrypt_file = raw_input('Enter private key file\\n')\n\ttext = raw_input('Enter encrypted data\\n')\n\tprint _decrypt_rsa(decrypt_file,text)\n\nFlag: MCA-68656172","maintainer":"MITRE","maintainer_email":"rbclark@mitre.org","license":"All rights reserved","platforms":{},"dependencies":{"apache2":">= 0.0.0","openssh":">= 0.0.0"},"recommendations":{},"suggestions":{},"conflicting":{},"providing":{},"replacing":{},"attributes":{},"groupings":{},"recipes":{},"version":"0.1.0"}